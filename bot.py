# import os
# import telebot
# import requests
# import re
# from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
# import sys # –î–æ–±–∞–≤–∏–º sys –¥–ª—è –≤—ã—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞

# # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# BOT_TOKEN = os.environ.get('BOT_TOKEN')
# API_URL = os.environ.get('API_URL') # –ü–æ–ª—É—á–∞–µ–º URL API

# # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ ---
# if not BOT_TOKEN:
#     print("CRITICAL ERROR: BOT_TOKEN environment variable not found!")
#     sys.exit(1) # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω

# # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è URL API ---
# if not API_URL:
#     print("WARNING: API_URL environment variable not found. Using default (if any) or requests might fail.")
#     # –ú–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å
#     # API_URL = 'https://default.api.example.com' # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
# bot = telebot.TeleBot(BOT_TOKEN)
# print("Bot initialized successfully.") # –î–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤

# @bot.message_handler(commands=['start'])

# def start_handler(message):

#     print(f"üÜî Chat ID –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {message.chat.id}")

#     bot.reply_to(message, f"–í–∞—à chat_id: {message.chat.id}")

# # --- –î–û–ë–ê–í–¨ –≠–¢–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–Æ–î–ê ---
# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     print(f"Received /start command from chat ID: {message.chat.id}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#     try:
#         bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
#         print(f"Sent welcome message to chat ID: {message.chat.id}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#     except Exception as e:
#         print(f"Error sending welcome message: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
# # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ---

# # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
# @bot.message_handler(func=lambda m: isinstance(m.text, str) and "–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:" in m.text)
# def handle_code(m):
#     print(f"Received potential code message from chat ID: {m.chat.id}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#     phone_match = re.search(r"–¢–µ–ª–µ—Ñ–æ–Ω:\s*([+\d\s()-]+)", m.text) # –ù–µ–º–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–∏–º —Ä–µ–≥. –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
#     phone = phone_match.group(1).strip() if phone_match else "–Ω–µ–≤—ñ–¥–æ–º–∏–π"

#     if phone == "–Ω–µ–≤—ñ–¥–æ–º–∏–π":
#         print("Could not parse phone number from message.") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

#     markup = InlineKeyboardMarkup()
#     markup.add(
#         InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"confirm_yes_{phone}"),
#         InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"confirm_no_{phone}")
#     )
#     try:
#         bot.send_message(m.chat.id, f"{m.text}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ?", reply_markup=markup)
#         print(f"Sent confirmation request for phone: {phone}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#     except Exception as e:
#         print(f"Error sending confirmation message: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

# # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
# @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
# def handle_callback(call):
#     print(f"Received callback query: {call.data} from chat ID: {call.message.chat.id}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#     status = "unknown"
#     phone = "unknown"
#     try:
#         data = call.data
#         if data.startswith("confirm_yes_"):
#             phone = data.replace("confirm_yes_", "")
#             status = "approved"
#         elif data.startswith("confirm_no_"):
#             phone = data.replace("confirm_no_", "")
#             status = "rejected"
#         else:
#             print(f"Invalid callback data format: {data}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#             bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
#             bot.edit_message_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.", call.message.chat.id, call.message.message_id)
#             return

#         # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥ ---
#         if not API_URL:
#              print("ERROR: API_URL is not set. Cannot send data to backend.")
#              bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ URL —Å–µ—Ä–≤–µ—Ä–∞.")
#              bot.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞.", call.message.chat.id, call.message.message_id)
#              return

#         backend_url = f"{API_URL}/user-request" # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π URL
#         payload = {"phone": phone, "result": status}
#         print(f"Sending data to backend: {backend_url} with payload: {payload}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

#         try:
#             response = requests.post(backend_url, json=payload, timeout=10) # –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç
#             response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (4xx, 5xx)

#             # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
#             print(f"Backend request successful. Status code: {response.status_code}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#             confirmation_text = f"‚úÖ –î–∞–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç—ñ: {status}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
#             bot.answer_callback_query(call.id, f"–î–∞–Ω—ñ –¥–ª—è {phone} –ø—Ä–∏–π–Ω—è—Ç—ñ.") # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫
#             bot.edit_message_text(confirmation_text, call.message.chat.id, call.message.message_id, reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

#         except requests.exceptions.RequestException as e:
#             # –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, —Ç–∞–π–º–∞—É—Ç, DNS –∏–ª–∏ HTTP –æ—à–∏–±–∫–∞
#             print(f"ERROR sending data to backend: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#             error_text = f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–≤'—è–∑–∫—É –∑ —Å–µ—Ä–≤–µ—Ä–æ–º.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
#             bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
#             # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ò–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å –æ—à–∏–±–∫–æ–π.
#             bot.edit_message_text(error_text, call.message.chat.id, call.message.message_id)

#     except Exception as e:
#         # –î—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
#         print(f"UNEXPECTED ERROR in callback handler: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#         error_text = f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏."
#         bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞.")
#         try:
#             # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
#              bot.edit_message_text(error_text, call.message.chat.id, call.message.message_id)
#         except Exception as edit_e:
#              print(f"Could not edit message after error: {edit_e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

# # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
# if __name__ == '__main__': # –•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
#     print("Starting bot polling...")
#     try:
#         bot.infinity_polling(skip_pending=True) # skip_pending=True - —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
#     except Exception as e:
#         print(f"ERROR during bot polling: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø–æ–ª–ª–∏–Ω–≥–∞
#         # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
#         sys.exit(1) # –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ (Railway) –º–æ–≥–ª–∞ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
import os
import telebot
import requests
import re
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sys

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
API_URL = os.environ.get('API_URL')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ URL ---
if not BOT_TOKEN:
    print("CRITICAL ERROR: BOT_TOKEN environment variable not found!")
    sys.exit(1)

if not API_URL:
    print("WARNING: API_URL environment variable not found.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN)
print("Bot initialized successfully.")

# --- –ü–ê–ú'–Ø–¢–¨ –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É 6 –ª—ñ—Ç–µ—Ä ---
pending_codes = {}  # chat_id: phone

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    print(f"üÜî Chat ID –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {message.chat.id}")
    try:
        bot.reply_to(message, f"–í–∞—à chat_id: {message.chat.id}\n–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    except Exception as e:
        print(f"Error sending welcome message: {e}")

# --- –û–±—Ä–æ–±–∫–∞ "–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç" (–ø–µ—Ä—à–∞ —Ñ–æ—Ä–º–∞) ---
@bot.message_handler(func=lambda m: "–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç" in m.text and "–¢–µ–ª–µ—Ñ–æ–Ω:" in m.text)
def handle_first_form(m):
    phone_match = re.search(r"–¢–µ–ª–µ—Ñ–æ–Ω:\s*([+\d\s()-]+)", m.text)
    phone = phone_match.group(1).strip() if phone_match else None

    if not phone:
        bot.reply_to(m, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –Ω–æ–º–µ—Ä.")
        return

    pending_codes[m.chat.id] = phone
    bot.reply_to(m, f"‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ 6 –ª—ñ—Ç–µ—Ä –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")

# --- –û–±—Ä–æ–±–∫–∞ 6-–ª—ñ—Ç–µ—Ä–Ω–æ–≥–æ –∫–æ–¥—É ---
@bot.message_handler(func=lambda m: m.chat.id in pending_codes and re.fullmatch(r"[a-zA-Z]{6}", m.text.strip()))
def handle_letter_code(m):
    phone = pending_codes.pop(m.chat.id)
    code = m.text.strip().upper()

    msg = f"\U0001F510 –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ö–æ–¥: {code}"

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"confirm_yes_{phone}"),
        InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"confirm_no_{phone}")
    )

    bot.send_message(m.chat.id, f"{msg}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ?", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def handle_callback(call):
    print(f"Received callback query: {call.data} from chat ID: {call.message.chat.id}")
    status = "unknown"
    phone = "unknown"
    try:
        data = call.data
        if data.startswith("confirm_yes_"):
            phone = data.replace("confirm_yes_", "")
            status = "approved"
        elif data.startswith("confirm_no_"):
            phone = data.replace("confirm_no_", "")
            status = "rejected"
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
            bot.edit_message_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.", call.message.chat.id, call.message.message_id)
            return

        if not API_URL:
            bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ URL —Å–µ—Ä–≤–µ—Ä–∞.")
            bot.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞.", call.message.chat.id, call.message.message_id)
            return

        backend_url = f"{API_URL}/user-request"
        payload = {"phone": phone, "result": status}
        print(f"Sending data to backend: {backend_url} with payload: {payload}")

        response = requests.post(backend_url, json=payload, timeout=10)
        response.raise_for_status()

        confirmation_text = f"‚úÖ –î–∞–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç—ñ: {status}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        bot.answer_callback_query(call.id, f"–î–∞–Ω—ñ –¥–ª—è {phone} –ø—Ä–∏–π–Ω—è—Ç—ñ.")
        bot.edit_message_text(confirmation_text, call.message.chat.id, call.message.message_id, reply_markup=None)

    except requests.exceptions.RequestException as e:
        print(f"ERROR sending data to backend: {e}")
        error_text = f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–≤'—è–∑–∫—É –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
        bot.edit_message_text(error_text, call.message.chat.id, call.message.message_id)

    except Exception as e:
        print(f"UNEXPECTED ERROR in callback handler: {e}")
        error_text = f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏."
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞.")
        try:
            bot.edit_message_text(error_text, call.message.chat.id, call.message.message_id)
        except Exception as edit_e:
            print(f"Could not edit message after error: {edit_e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("Starting bot polling...")
    try:
        bot.infinity_polling(skip_pending=True)
    except Exception as e:
        print(f"ERROR during bot polling: {e}")
        sys.exit(1)
